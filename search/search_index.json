{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Code Context Analyzer","text":"<p>Welcome to the Code Context Analyzer documentation!</p> <p>This tool provides a command-line interface (<code>cca</code>) to analyze the structural context of codebases \u2014 including functions, classes, constants, and file hierarchy. It supports Python and JavaScript and is designed to help developers, code reviewers, and documentation tools better understand code organization.</p>"},{"location":"#quick-start","title":"\ud83d\ude80 Quick Start","text":""},{"location":"#install-via-pip","title":"\ud83d\udce6 Install via pip","text":"<pre><code>pip install code-context-analyzer\n</code></pre>"},{"location":"#analyze-a-local-project","title":"\ud83d\udcc1 Analyze a local project","text":"<pre><code>cca ./my_project --lang python --depth 2\n</code></pre>"},{"location":"#analyze-a-github-repository","title":"\ud83c\udf10 Analyze a GitHub repository","text":"<pre><code>cca https://github.com/pallets/flask --lang python --depth 2\n</code></pre>"},{"location":"#features","title":"\u2699\ufe0f Features","text":"<ul> <li>\ud83d\udcc2 Recursive file discovery</li> <li>Respects .gitignore</li> <li>Skips hidden and test directories if specified</li> <li>\ud83e\udde0 Parsers for Python and JavaScript</li> <li>Extracts classes, functions, constants</li> <li>\ud83d\udda5\ufe0f CLI interface using cca command</li> <li>\ud83d\udccb Clipboard output support </li> <li>\ud83d\udd0c Modular architecture for future language extensions</li> <li>\ud83c\udf10 Supports both local paths and GitHub URLs</li> </ul>"},{"location":"#project-structure","title":"\ud83d\udcc1 Project Structure","text":"<pre><code>code_context_analyzer/\n\u251c\u2500\u2500 cli/\n\u2502   \u251c\u2500\u2500 __init__.py            # CLI app codes\n\u251c\u2500\u2500 analyzer/\n\u2502   \u251c\u2500\u2500 discovery.py          # File discovery logic\n\u2502   \u251c\u2500\u2500 formatter.py          # Output formatter\n\u2502   \u251c\u2500\u2500 repository_handler.py # GitHub/local repo handling\n\u2502   \u251c\u2500\u2500 clipboard.py          # Clipboard support\n\u2502   \u251c\u2500\u2500 parsers/              # Code parsers (Python, JS)\n\u2502   \u2514\u2500\u2500 utils/                # Temporary directory helpers\n\u2514\u2500\u2500 tests/                    # Test suite\n\u2514\u2500\u2500 main.py                   # Entrypoint\n</code></pre>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>Usage</li> <li>Architecture Overview</li> <li>Module Reference</li> <li>Contributing</li> </ul>"},{"location":"#license","title":"\ud83d\udcce License","text":"<p>This project is licensed under the MIT License</p> <p>For detailed usage guide, see Usage.</p>"},{"location":"architecture/","title":"Architecture Overview","text":"<p>This document provides an overview of the internal architecture of Code Context Analyzer.</p>"},{"location":"architecture/#high-level-components","title":"\ud83e\uddf1 High-Level Components","text":"<p>The project is composed of several modular layers:</p> <pre><code>User CLI (cca)\n   \u2193\nSource Resolver (local path or GitHub URL)\n   \u2193\nFile Discovery (discover_files)\n   \u2193\nLanguage Parsers (Python, JS)\n   \u2193\nFormatter (structured summary)\n   \u2193\nCLI Output (terminal or clipboard)\n</code></pre>"},{"location":"architecture/#directory-structure","title":"\ud83d\udcc1 Directory Structure","text":"<pre><code>code_context_analyzer/\n\u251c\u2500\u2500 cli/\n\u2502   \u2514\u2500\u2500 __init__.py        # CLI logic, defines `app()`\n\u251c\u2500\u2500 main.py                # Optional entry point script\n\u251c\u2500\u2500 analyzer/\n\u2502   \u251c\u2500\u2500 discovery.py       # File discovery logic\n\u2502   \u251c\u2500\u2500 formatter.py       # Formats parsed output\n\u2502   \u251c\u2500\u2500 repository_handler.py # Handles GitHub/local resolution\n\u2502   \u251c\u2500\u2500 clipboard.py       # Cross-platform clipboard copying\n\u251c\u2500\u2500 parsers/\n\u2502   \u251c\u2500\u2500 base.py            # ParserProtocol definition\n\u2502   \u251c\u2500\u2500 python_parser.py   # Python code parser using `ast`\n\u2502   \u251c\u2500\u2500 js_parser.py       # JavaScript parser using regex\n\u251c\u2500\u2500 utils/\n\u2502   \u2514\u2500\u2500 temp_dir.py        # Temp directory context manager\n</code></pre>"},{"location":"architecture/#process-flow","title":"\ud83d\udd04 Process Flow","text":"<ol> <li>User invokes CLI</li> </ol> <p>The user runs:</p> <pre><code>cca &lt;source&gt; --lang python --depth 2\n</code></pre> <ol> <li> <p>RepositoryHandler resolves the source</p> </li> <li> <p>If local path: it validates the directory</p> </li> <li> <p>If GitHub URL: it clones the repo to a temp dir</p> </li> <li> <p><code>discover_files()</code> walks the directory</p> </li> <li> <p>Yields paths and their inferred language</p> </li> <li> <p>Filters based on extension, test files, max files</p> </li> <li> <p>Parsers process each file</p> </li> <li> <p>Python parser uses <code>ast</code> to find classes, functions, constants</p> </li> <li> <p>JS parser uses regex to extract functions/classes</p> </li> <li> <p>Formatter builds structured output</p> </li> <li> <p>Outputs hierarchy based on folder/module structure</p> </li> <li> <p>Optional truncation or flattening via <code>depth</code></p> </li> <li> <p>Output sent to terminal or clipboard</p> </li> <li> <p>If <code>--copy</code> is passed, summary is copied using <code>pyperclip</code></p> </li> </ol>"},{"location":"architecture/#extensibility","title":"\ud83d\udd0c Extensibility","text":"<p>To add support for a new language:</p> <ol> <li>Create a new parser in <code>parsers/</code> (e.g. <code>go_parser.py</code>)</li> <li>Implement the <code>ParserProtocol</code></li> <li>Register the parser in the CLI entrypoint</li> </ol> <p>Example:</p> <pre><code>from .go_parser import GoParser\n\nPARSERS = {\n    \"python\": PythonParser(),\n    \"js\": JSParser(),\n    \"go\": GoParser(),  # new\n}\n</code></pre>"},{"location":"architecture/#testing-and-maintenance","title":"\ud83e\uddea Testing and Maintenance","text":"<ul> <li>All modules are designed to be testable independently</li> <li>Temp directories are safely handled via context manager</li> <li>CLI arguments can be tested via unit or integration tests</li> </ul> <p>For detailed module documentation, see Module Reference.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to this project will be documented in this file.</p> <p>This project follows Semantic Versioning.</p>"},{"location":"changelog/#010-2025-08-26","title":"[0.1.0] - 2025-08-26","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial release of Code Context Analyzer</li> <li>CLI interface via <code>cca</code> command</li> <li>Support for analyzing:</li> <li>Local directories</li> <li>Remote GitHub repositories</li> <li>File discovery module with <code>.gitignore</code> and test skipping</li> <li>Parsers for:</li> <li>Python (via <code>ast</code>)</li> <li>JavaScript (via regex)</li> <li>Modular <code>Formatter</code> class to generate text summaries</li> <li>Clipboard copy support (<code>--copy</code>)</li> <li>CLI flags for <code>--depth</code>, <code>--lang</code>, <code>--max-files</code>, <code>--ignore-tests</code></li> <li>Temporary directory context manager for safe GitHub repo cloning</li> </ul>"},{"location":"changelog/#unreleased","title":"[Unreleased]","text":""},{"location":"changelog/#planned","title":"Planned","text":"<ul> <li>Add support for TypeScript and Go parsing</li> <li>Interactive TUI or web viewer</li> <li>JSON and Markdown output formats</li> <li>Syntax highlighting in output</li> <li>VSCode extension</li> </ul> <p>For detailed contribution guide, see Contributing.</p>"},{"location":"contributing/","title":"Contributing Guide","text":"<p>Thank you for your interest in contributing to Code Context Analyzer!</p> <p>This guide will help you get started with local development, testing, and submitting changes.</p>"},{"location":"contributing/#prerequisites","title":"\ud83e\uddf0 Prerequisites","text":"<ul> <li>Python 3.8+</li> <li><code>pip</code> or <code>poetry</code></li> <li>Git</li> </ul>"},{"location":"contributing/#setting-up-locally","title":"\ud83d\udce6 Setting Up Locally","text":"<pre><code>git clone https://github.com/yourusername/code-context-analyzer.git\ncd code-context-analyzer\npip install -r requirements.txt\n</code></pre> <p>For development:</p> <pre><code>pip install -r requirements-dev.txt\n</code></pre> <p>You can also use <code>poetry install</code> if you're using Poetry.</p>"},{"location":"contributing/#running-tests","title":"\ud83e\uddea Running Tests","text":"<p>This project uses pytest.</p> <pre><code>pytest\n</code></pre> <p>To run tests with coverage:</p> <pre><code>pytest --cov=analyzer --cov=parsers\n</code></pre>"},{"location":"contributing/#code-style","title":"\ud83e\uddfc Code Style","text":"<ul> <li>Follow PEP8 for formatting</li> <li>Use type hints wherever possible</li> <li>Run <code>black</code> and <code>flake8</code> before submitting</li> </ul> <p>Format your code:</p> <pre><code>black .\n</code></pre> <p>Check for linting errors:</p> <pre><code>flake8\n</code></pre>"},{"location":"contributing/#submitting-a-pull-request","title":"\ud83d\udcdd Submitting a Pull Request","text":"<ol> <li>Fork the repository</li> <li>Create a new branch (<code>git checkout -b feature/my-new-feature</code>)</li> <li>Make your changes</li> <li>Write tests if applicable</li> <li>Run tests and linters</li> <li>Commit and push (<code>git commit -m \"Add: my new feature\"</code>)</li> <li>Open a Pull Request against <code>main</code></li> </ol>"},{"location":"contributing/#adding-a-new-language-parser","title":"\ud83d\udd0c Adding a New Language Parser","text":"<ol> <li>Create a new file in <code>parsers/</code> (e.g. <code>go_parser.py</code>)</li> <li>Implement the <code>ParserProtocol</code></li> <li>Register it in the CLI (<code>cli/__init__.py</code>)</li> <li>Add tests for the parser</li> </ol>"},{"location":"contributing/#documentation","title":"\ud83d\udcda Documentation","text":"<p>Documentation is powered by MkDocs and lives in the <code>docs/</code> folder.</p> <p>To preview locally:</p> <pre><code>mkdocs serve\n</code></pre>"},{"location":"contributing/#code-of-conduct","title":"\ud83c\udf0d Code of Conduct","text":"<p>Please be respectful and inclusive in all interactions. We follow the Contributor Covenant.</p> <p>Thanks again for contributing! \ud83d\udc99 See License.</p>"},{"location":"license/","title":"License","text":"<p>MIT License</p> <p>Copyright (c) 2025 [Your Name]</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"modules/","title":"Module Reference","text":"<p>This page lists and describes the major modules and classes in Code Context Analyzer.</p>"},{"location":"modules/#cli","title":"\ud83d\udcc2 <code>cli/</code>","text":""},{"location":"modules/#__init__py","title":"<code>__init__.py</code>","text":"<ul> <li>Function: <code>app(argv=None)</code></li> <li>Entry point for the CLI interface.</li> <li>Parses arguments, initializes analysis, and prints or copies results.</li> <li>Uses components from <code>analyzer/</code>, <code>parsers/</code>, and <code>utils/</code>.</li> </ul>"},{"location":"modules/#analyzer","title":"\ud83d\udcc2 <code>analyzer/</code>","text":""},{"location":"modules/#discoverypy","title":"<code>discovery.py</code>","text":"<ul> <li>Function: <code>discover_files(root, languages, max_files, ignore_tests)</code></li> <li>Recursively walks a directory.</li> <li>Yields file paths and inferred languages based on extension.</li> <li> <p>Skips hidden directories, <code>__pycache__</code>, and optionally test files.</p> </li> <li> <p>Constant: <code>EXT_MAP</code></p> </li> <li>Maps file extensions to language identifiers (e.g., <code>.py</code> \u2192 <code>python</code>).</li> </ul>"},{"location":"modules/#formatterpy","title":"<code>formatter.py</code>","text":"<ul> <li>Class: <code>Formatter</code></li> <li>Responsible for formatting the parsed data into a hierarchical summary.</li> <li> <p>Takes options like <code>depth</code>, <code>method_preview</code>, and truncation settings.</p> </li> <li> <p>Key Methods:</p> </li> <li><code>format_project(parsed)</code></li> <li><code>_compute_common_root(paths)</code></li> <li><code>_build_header(...)</code></li> </ul>"},{"location":"modules/#clipboardpy","title":"<code>clipboard.py</code>","text":"<ul> <li>Function: <code>copy_to_clipboard(text)</code></li> <li>Uses <code>pyperclip</code> to copy output text to the system clipboard.</li> <li>Returns <code>True</code> on success, <code>False</code> on failure.</li> </ul>"},{"location":"modules/#repository_handlerpy","title":"<code>repository_handler.py</code>","text":"<ul> <li>Class: <code>RepositoryHandler</code></li> <li>Handles resolving a source location (local or GitHub).</li> <li> <p>Supports:</p> <ul> <li>Cloning GitHub repos into temp directories</li> <li>Copying local folders</li> <li>Selecting a branch</li> </ul> </li> <li> <p>Key Methods:</p> </li> <li><code>resolve_source(source, branch)</code></li> <li><code>_clone_repo_to_temp(...)</code></li> </ul>"},{"location":"modules/#parsers","title":"\ud83d\udcc2 <code>parsers/</code>","text":""},{"location":"modules/#basepy","title":"<code>base.py</code>","text":"<ul> <li>Class: <code>ParserProtocol</code> (Python Protocol)</li> <li>Defines the interface for all language parsers.</li> <li>Required method: <code>parse_file(self, path)</code></li> </ul>"},{"location":"modules/#python_parserpy","title":"<code>python_parser.py</code>","text":"<ul> <li>Class: <code>PythonParser</code></li> <li>Parses Python files using the <code>ast</code> module.</li> <li> <p>Extracts classes, function signatures, and constants.</p> </li> <li> <p>Key Methods:</p> </li> <li><code>parse_file(path)</code></li> <li><code>_sig_from_function(node)</code></li> </ul>"},{"location":"modules/#js_parserpy","title":"<code>js_parser.py</code>","text":"<ul> <li>Class: <code>JSParser</code></li> <li>Parses JavaScript source files using regular expressions.</li> <li> <p>Detects:</p> <ul> <li>Class definitions</li> <li>Function declarations</li> <li>Exported functions</li> </ul> </li> <li> <p>Constants:</p> </li> <li><code>RE_CLASS</code>, <code>RE_FN</code>, <code>RE_EXPORT_FN</code></li> </ul>"},{"location":"modules/#utils","title":"\ud83d\udcc2 <code>utils/</code>","text":""},{"location":"modules/#temp_dirpy","title":"<code>temp_dir.py</code>","text":"<ul> <li>Function: <code>temp_directory(suffix, prefix, dir, auto_cleanup)</code></li> <li>Context manager for creating and managing temporary directories.</li> <li>Automatically removes directory after use if <code>auto_cleanup=True</code>.</li> </ul>"},{"location":"modules/#tests-and-teststest_parsers","title":"\ud83d\udcc2 <code>tests/</code> and <code>tests/test_parsers/</code>","text":"<ul> <li>Currently includes <code>__init__.py</code> placeholders.</li> <li>Use <code>pytest</code> to test:</li> <li>File discovery logic</li> <li>Parser outputs</li> <li>Formatter correctness</li> <li>CLI entry point behavior</li> </ul>"},{"location":"modules/#summary","title":"\ud83d\udce6 Summary","text":"Module Role <code>cli</code> CLI entrypoint and orchestration <code>discovery.py</code> File collection <code>formatter.py</code> Summary formatting <code>clipboard.py</code> Clipboard copy utility <code>repository_handler.py</code> GitHub/local repo resolution <code>python_parser.py</code>, <code>js_parser.py</code> Language parsers <code>temp_dir.py</code> Temporary directory context <p>For detailed system flow, see Changelog.</p>"},{"location":"usage/","title":"Usage Guide","text":"<p>This guide explains how to use the <code>cca</code> command-line interface to analyze source code.</p>"},{"location":"usage/#basic-command","title":"\ud83d\udd27 Basic Command","text":"<pre><code>cca &lt;source&gt; [options]\n</code></pre>"},{"location":"usage/#examples","title":"Examples","text":"<p>Analyze a local directory:</p> <pre><code>cca ./my_project --lang python --depth 2\n</code></pre> <p>Analyze a GitHub repository:</p> <pre><code>cca https://github.com/pallets/flask --lang python\n</code></pre>"},{"location":"usage/#cli-options","title":"\u2699\ufe0f CLI Options","text":"Option Description <code>&lt;source&gt;</code> Path to a local directory or a GitHub repo URL <code>--lang</code> Comma-separated list of languages to analyze (e.g., <code>python,js</code>) <code>--depth</code> Hierarchy depth for formatted output <code>--max-files</code> Maximum number of files to process <code>--ignore-tests</code> Skip test files like <code>test_*.py</code> or <code>*.spec.js</code> <code>--branch</code> Git branch to use (only applies when source is a GitHub repository) <code>--copy</code> Copy the formatted output to clipboard <code>--help</code> Show help message"},{"location":"usage/#language-support","title":"\ud83e\udde0 Language Support","text":"<p>Currently supported languages:</p> <ul> <li>Python (<code>.py</code>)</li> <li>JavaScript (<code>.js</code>)</li> </ul>"},{"location":"usage/#tips","title":"\ud83e\uddea Tips","text":"<ul> <li>Use <code>--depth 1</code> to see a flat summary</li> <li>Combine <code>--ignore-tests</code> and <code>--max-files</code> for faster scans</li> <li>Use <code>--copy</code> to paste summaries into docs or PRs</li> </ul>"},{"location":"usage/#output-example","title":"\ud83d\udcdd Output Example","text":"<pre><code>project/\n\u251c\u2500\u2500 module_a/\n\u2502   \u251c\u2500\u2500 file1.py (2 classes, 3 functions)\n\u2502   \u2514\u2500\u2500 file2.py (1 function)\n\u2514\u2500\u2500 module_b/\n    \u2514\u2500\u2500 file3.js (1 class, 2 exported functions)\n</code></pre> <p>For more details on internals, see Architecture.</p>"}]}